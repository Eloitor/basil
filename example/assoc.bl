def K? to V? : (Type, Type) -> Type =
    Map of [(K, V)]

def group pairs? =
    match pairs with:
        () => ()
        x? :: y? :: xs? => (x, y) :: group xs

def map pairs...? =
    Map of group pairs

def m? find-key k? =
    match m with:
        (k, v?) :: xs? => v
        e? :: xs? => xs find-key k

def m? find k? : (Any to Any, Any) -> Any =
    match m with:
        Map of xs? => xs find-key k

def m? with entry? : (Any to Any, (Any, Any)) -> Any =
    match m with:
        Map of xs? => Map of (entry :: xs)
